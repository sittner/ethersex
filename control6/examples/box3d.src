/*
 * Copyright (c) 2017 Erik Kunze <ethersex@erik-kunze.de>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * For more information on the GPL, please go to:
 * http://www.gnu.org/copyleft/gpl.html
 */

/*
  Color GLCD examples taken from UCGLIB and adjusted to Ethersex
 */

#include <stdint.h>
#include <avr/delay.h>
#include "hardware/lcd/glcd/glcd.h"


// define a 3d point structure 
struct pt3d
{
  ucg_int_t x, y, z;
};

struct surface
{
  uint8_t p[4];
  int16_t z;
};

struct pt2d
{
  ucg_int_t x, y;
  unsigned is_visible;
};


// define the point at which the observer looks, 3d box will be centered there
#define MX (glcd_get_width()/2)
#define MY (glcd_get_height()/2)

// define a value that corresponds to "1"
#define U 128

// eye to screen distance (fixed)
#define ZS U

// cube edge length is 2*U
static struct pt3d cube[8] = {
  {-U, -U, U},
  {U, -U, U},
  {U, -U, -U},
  {-U, -U, -U},
  {-U, U, U},
  {U, U, U},
  {U, U, -U},
  {-U, U, -U},
};

// define the surfaces
static struct surface cube_surface[6] = {
  {{0, 1, 2, 3}, 0},            // bottom
  {{4, 5, 6, 7}, 0},            // top
  {{0, 1, 5, 4}, 0},            // back

  {{3, 7, 6, 2}, 0},            // front
  {{1, 2, 6, 5}, 0},            // right
  {{0, 3, 7, 4}, 0},            // left
};

// define some structures for the copy of the box, calculation will be done there
static struct pt3d cube2[8];
static struct pt2d cube_pt[8];

// will contain a rectangle border of the box projection into 2d plane
static int16_t x_min, x_max;
static int16_t y_min, y_max;

static int16_t sin_tbl[65] = {
  0, 1606, 3196, 4756, 6270, 7723, 9102, 10394, 11585, 12665, 13623, 14449,
  15137, 15679, 16069, 16305, 16384, 16305, 16069, 15679,
  15137, 14449, 13623, 12665, 11585, 10394, 9102, 7723, 6270, 4756, 3196,
  1606, 0, -1605, -3195, -4755, -6269, -7722, -9101, -10393,
  -11584, -12664, -13622, -14448, -15136, -15678, -16068, -16304, -16383,
  -16304, -16068, -15678, -15136, -14448, -13622, -12664, -11584, -10393,
  -9101, -7722,
  -6269, -4755, -3195, -1605, 0
};

static int16_t cos_tbl[65] = {
  16384, 16305, 16069, 15679, 15137, 14449, 13623, 12665, 11585, 10394, 9102,
  7723, 6270, 4756, 3196, 1606, 0, -1605, -3195, -4755,
  -6269, -7722, -9101, -10393, -11584, -12664, -13622, -14448, -15136, -15678,
  -16068, -16304, -16383, -16304, -16068, -15678, -15136, -14448, -13622,
  -12664,
  -11584, -10393, -9101, -7722, -6269, -4755, -3195, -1605, 0, 1606, 3196,
  4756, 6270, 7723, 9102, 10394, 11585, 12665, 13623, 14449,
  15137, 15679, 16069, 16305, 16384
};


static void
copy_cube(void)
{
  uint8_t i;
  for (i = 0; i < 8; i++)
  {
    cube2[i] = cube[i];
  }
}

static void
rotate_cube_y(uint16_t w)
{
  /*
   * x' = x * cos(w) + z * sin(w)
   * z' = - x * sin(w) + z * cos(w)  
   */
  for (uint8_t i = 0; i < 8; i++)
  {
    int16_t x =
      ((int32_t) cube2[i].x * (int32_t) cos_tbl[w] +
       (int32_t) cube2[i].z * (int32_t) sin_tbl[w]) >> 14;
    int16_t z =
      (-(int32_t) cube2[i].x * (int32_t) sin_tbl[w] +
       (int32_t) cube2[i].z * (int32_t) cos_tbl[w]) >> 14;
    //printf("%d: %d %d --> %d %d\n", i, cube2[i].x, cube2[i].z, x, z);
    cube2[i].x = x;
    cube2[i].z = z;
  }
}

static void
rotate_cube_x(uint16_t w)
{
  for (uint8_t i = 0; i < 8; i++)
  {
    int16_t y =
      ((int32_t) cube2[i].y * (int32_t) cos_tbl[w] +
       (int32_t) cube2[i].z * (int32_t) sin_tbl[w]) >> 14;
    int16_t z =
      (-(int32_t) cube2[i].y * (int32_t) sin_tbl[w] +
       (int32_t) cube2[i].z * (int32_t) cos_tbl[w]) >> 14;
    cube2[i].y = y;
    cube2[i].z = z;
  }
}

static void
trans_cube(uint16_t z)
{
  for (uint8_t i = 0; i < 8; i++)
  {
    cube2[i].z += z;
  }
}

static void
reset_min_max(void)
{
  x_min = 0x07fff;
  y_min = 0x07fff;
  x_max = -0x07fff;
  y_max = -0x07fff;
}

// calculate xs and ys from a 3d value
static void
convert_3d_to_2d(struct pt3d *p3, struct pt2d *p2)
{
  p2->is_visible = 1;
  if (p3->z >= ZS)
  {
    int32_t t = ZS;
    t *= p3->x;
    t <<= 1;
    t /= p3->z;
    if (t >= -MX && t <= MX - 1)
    {
      t += MX;
      p2->x = t;

      if (x_min > t)
        x_min = t;
      if (x_max < t)
        x_max = t;

      t = ZS;
      t *= p3->y;
      t <<= 1;
      t /= p3->z;
      if (t >= -MY && t <= MY - 1)
      {
        t += MY;
        p2->y = t;

        if (y_min > t)
          y_min = t;
        if (y_max < t)
          y_max = t;
      }
      else
      {
        p2->is_visible = 0;
      }
    }
    else
    {
      p2->is_visible = 0;
    }
  }
  else
  {
    p2->is_visible = 0;
  }
}

static void
convert_cube(void)
{
  reset_min_max();
  for (uint8_t i = 0; i < 8; i++)
  {
    convert_3d_to_2d(cube2 + i, cube_pt + i);
    //printf("%d: %d %d\n", i, cube_pt[i].x, cube_pt[i].y);
  }
}

static void
calculate_z(void)
{
  for (uint8_t i = 0; i < 6; i++)
  {
    uint16_t z = 0;
    for (uint8_t j = 0; j < 4; j++)
    {
      z += cube2[cube_surface[i].p[j]].z;
    }
    z /= 4;
    cube_surface[i].z = z;
    //printf("%d: z=%d\n", i, z);
  }
}

static void
draw_cube(void)
{
  uint8_t skip_cnt = 3;         /* it is known, that the first 3 surfaces are invisible */
  int16_t z_upper = 32767;

  for (;;)
  {
    uint8_t ii = 6;
    int16_t z = -32767;
    for (uint8_t i = 0; i < 6; i++)
    {
      if (cube_surface[i].z <= z_upper)
      {
        if (z < cube_surface[i].z)
        {
          z = cube_surface[i].z;
          ii = i;
        }
      }
    }

    if (ii >= 6)
      break;
    //printf("%d z=%d upper=%d\n", ii, z, z_upper);
    z_upper = cube_surface[ii].z;
    cube_surface[ii].z++;

    if (skip_cnt > 0)
    {
      skip_cnt--;
    }
    else
    {
      glcd_set_color(0, ((ii + 1) & 1) * 255, (((ii + 1) >> 1) & 1) * 255,
                     (((ii + 1) >> 2) & 1) * 255);
      glcd_draw_tetragon(cube_pt[cube_surface[ii].p[0]].x,
                         cube_pt[cube_surface[ii].p[0]].y,
                         cube_pt[cube_surface[ii].p[1]].x,
                         cube_pt[cube_surface[ii].p[1]].y,
                         cube_pt[cube_surface[ii].p[2]].x,
                         cube_pt[cube_surface[ii].p[2]].y,
                         cube_pt[cube_surface[ii].p[3]].x,
                         cube_pt[cube_surface[ii].p[3]].y);
    }
  }
}

static void
calc_and_draw(uint16_t w, uint16_t v)
{
  copy_cube();
  rotate_cube_y(w);
  rotate_cube_x(v);
  trans_cube(U * 8);
  convert_cube();
  calculate_z();
  draw_cube();
}

static void
setup(void)
{
  glcd_set_rotate_90();
  glcd_clear_screen();
  glcd_set_font(GLCD_FONT_NCENR10_TR);
  glcd_set_color(0, 255, 255, 255);
  glcd_draw_string_P(25, 25, GLCD_DIR_LTR, PSTR("Ethersex Box3D"));
}

static void
tick(void)
{
  static uint16_t w = 0;
  static uint16_t v = 0;

  glcd_set_color(0, 0, 0, 0);
  glcd_draw_box(x_min, y_min, x_max - x_min + 1, y_max - y_min + 1);

  calc_and_draw(w, v >> 3);

  v += 3;
  v &= 511;

  w++;
  w &= 63;
}

CONTROL_START

  ON STARTUP DO
    setup();
  END

  tick();

CONTROL_END

